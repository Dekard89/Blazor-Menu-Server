@inject IRepository<Recipe> _repository
@page "/recipe/edit/{RecipeId:int}"
@using System.ComponentModel.DataAnnotations

<div class="row">
    <div class="col-6 customForm">
       <EditForm FormName="EditRecipe" Model="Recipe" OnValidSubmit="OnValidSubmit" >
           <DataAnnotationsValidator/>
           <div class="mt-3">
             <label>Enter name</label>
              <InputText class="form-control" @bind-Value="@Recipe.Name" placeholder="@Recipe.Name"/>
              <ValidationMessage For="@(()=>Recipe.Name)"/>
           </div>
           <div class="mt-3">
               <label>Enter time to cook</label>
               <InputDate Type="InputDateType.Time" @bind-Value="InputTime" />
               
           </div> 
           <div class="mt-3 ">
               <label>Add image</label>
               <InputFile OnChange="OnInputFileChange" multiple/>
               <ValidationMessage For="@(()=>Recipe.Image)"/>
           </div>
           <div class="mt-3">
               <label>Category</label>
               <InputSelect @bind-Value="Recipe.Category" class="form-select" >
                   <option value="">Change category</option>
                    @foreach(var item in Enum.GetValues(typeof(Category)))
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
           </div>
           <div class="mt-3">
               <label>Description</label>
               <InputTextArea class="form-control" @bind-Value="Recipe.Description"/>
           </div>
           <div>
               <button class=" mt-3 btn-outline-primary">Save</button>
           </div>
        </EditForm>
    </div>
    
   <div class="col-6 text-center">
        @if (Recipe.Id > 0)
        {
            <RecipeCard Recipe="Recipe"/>
        }
        
   </div>
   
</div>

@code {
    [Parameter] public int RecipeId { get; set; }

    [SupplyParameterFromForm]
    public Recipe Recipe { get; set; } 

    public DateTime InputTime { get; set; }




    protected override async void OnInitialized()
    {
        if (RecipeId > 0)
        {
            Recipe =await _repository.GetById(RecipeId);
        }
        else
        {
            Recipe = new();
            Recipe.TimeToCook = new(0, 0, 0);

        }
    }

    private async Task OnValidSubmit()
    {
        Recipe.TimeToCook = InputTime.TimeOfDay;
        await _repository.AddAsync(Recipe);
    }
    public static byte[] GetBytes(Stream stream)
    {
        var bytes = new byte[stream.Length];
        stream.Seek(0, SeekOrigin.Begin);
        stream.ReadAsync(bytes,0,bytes.Length);
        stream.Dispose();
        return bytes;
    }
    public async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        string base64String = "";

        try
        {
            foreach(var file in e.GetMultipleFiles())
            {
                await using MemoryStream fs = new();
                await file.OpenReadStream(maxAllowedSize: 1048576).CopyToAsync(fs);
                byte[] bytes = GetBytes(fs);
                base64String = Convert.ToBase64String(bytes,0,bytes.Length);
                Recipe.Image = base64String;
                Console.WriteLine(Recipe.Image);
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
        
   